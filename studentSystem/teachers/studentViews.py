from .forms import studentRegForm
from .serializers import StudentSerializer
from .models import Student;

from rest_framework.decorators import api_view, authentication_classes
from rest_framework.response import Response
from rest_framework.authentication import TokenAuthentication

# add a new student
@api_view(['POST', 'OPTIONS'])
@authentication_classes([TokenAuthentication]) # adds request.user as user object
def add_student(request):
    # must be staff, else forbid
    if not request.user.isStaff:
        return Response(status=403) #forbidden

    form = studentRegForm(request.data)
    if form.is_valid():
        form.save(commit=True);
        return Response(status=201) #new student created successfully
    else:
        # log out errors - use an app logger, return bad request
        print(form.errors.as_json)
        return Response(status=400) #bad request
    
# UPDATE, DEL ONE STUDENT
@api_view(['PATCH', 'DELETE'])
@authentication_classes([TokenAuthentication])
def edit_student(request, pk):
    
    # check if student exists
    editedData = request.data
    student = Student.objects.get(id=pk) #id - the autogenerated object id in db, not the student id
    if student is None:
        return Response(status=404) #Student notFound
    if request.method=='PATCH':
        # user may send only the portion of the object to be edited
        form = studentRegForm(editedData, instance=student)
        if form.is_valid():
            form.save(commit=True);
            
            # return the new object, serialized
            finalData = Student.objects.get(id=pk) #id the primary key
            serialized = StudentSerializer(finalData, many=False);
            return Response(status=201, data=serialized.data)
            
    # deleting
    elif request.method=='DELETE':
        # use try except to alert if not deleted
        try:
            student.delete();  
            return Response(status=200) #All is well
        except:
            # log out errors
            return Response(status=500) #Something went wrong
        
        
# GET DETAILS OF ONE STUDENT - Not protected by token
@api_view(['GET','OPTIONS'])
def get_student(request, pk):
    
    try:
        student = Student.objects.get(id=pk)
        # serialize
        serialized = StudentSerializer(student, many=False)
        return Response(status=200, data=serialized.data) #All is well
    except:
        # user not found
        return Response(status=404) #notFound


# FILTER STUDENT USING ID - SEARCH USER
@api_view(['GET', 'OPTIONS'])
def search_student(request):
    # get req.query
    queryId = request.query
    
    student = Student.objects.filter(student_id=queryId)
    if student is not None:
        # serialize
        serialized = StudentSerializer(student, many=False)
        return Response(status=200, data=serialized.data)
    else:
        # not found
        return Response(status=404) #noneFound